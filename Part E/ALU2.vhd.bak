library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ALU2 is
port( clock : in std_logic; 
		A, B : in unsigned(7 downto 0); 
		student_id : in unsigned(3 downto 0); 
		OP : in unsigned( 15 downto 0);
		
		neg: out std_logic; 
		R1 : out unsigned(3 downto 0);    
		R2 : out unsigned(3 downto 0)); 
		ResultA, ResultB : out unsigned(7 downto 0)); 
end ALU2;

architecture calculate of ALU2 is 
	signal Reg1, Reg2, Result : unsigned(7 downto 0):= (others => '0');
	signal Reg4 : unsigned (0 to 7);

begin
	Reg1 <= A; 
	Reg2 <= B; 

process(clock, OP)
begin
	if(rising_edge(clock)) THEN -- Calculation at positive edge of clock cycle.
		case OP is
			WHEN "0000000000000001" =>    -- Difference between A and B
				Result <= (Reg1 - Reg2);
				neg <= '0';

			WHEN "0000000000000010" =>		-- 2's complement of B
				Result<= (not Reg2 + 1);
				neg<= '0';
				
			WHEN "0000000000000100" => 	-- Swap the lower 4 bits of A with lower 4 bits of B
				Result <=
				ResultA = A;
				ResultB = B;
				ResultA = B[3:0];
				ResultB = A[3:0];
				neg<= '0';

			WHEN "0000000000001000" =>    -- Produce null on the output
				Result<= NULL;
				neg<= '0';

			WHEN "0000000000010000" =>    -- Decrement B by 5
				if (reg2 < 5) THEN
					Result<= (5 - Reg2);
					neg<= '1';]
				else
					Result<= (Reg2 - 5);
					neg<= '0';

			WHEN "0000000000100000" =>		-- Invert the bit-significance order of A
				Result<= {A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7]};
				neg<= '0';

			WHEN "0000000001000000" => 	-- Shift B to left by three bits, input bit = 1 (SHL)
				Result<= Reg2(5 downto 0) << 3;
				neg<= '0';

			WHEN "0000000010000000" =>		-- Increment A by 3
				if (Reg1 < 0) THEN
					Result<= (Reg1 + 3);
					neg< = '1';
				else 
					Result<= (Reg1 + 3);
					neg<= '0';

			WHEN "0000000100000000" =>		-- Invert all bits of B
				Result<= not(Reg2);
				neg<= '0';

			WHEN OTHERS =>
			
		end case;
	end if;
end process;
R1 <= Result(3 downto 0); 
R2 <= Result(7 downto 4); 
end calculate;